<Test>
    <Variables>
        <InternalVariables>
            <InternalVariable Name="apwcntr" Description="количество АПВ" Writable="1"/>
            <InternalVariable Name="apwtime" Description="время апв" Writable="1"/>
            <InternalVariable Name="outU4" Description="Напряжение точки 4" Writable="1"/>
            <InternalVariable Name="outFreq" Description="Выходная частота" Writable="0"/>
            <InternalVariable Name="defencetime" Description="Время срабатывания защиты" Writable="0"/>
            <InternalVariable Name="ignortime" Description="время игнорирования" Writable="1"/>
        </InternalVariables>
        <ExternalVariables/>
    </Variables>
    <Steps>
        <Begin Name="Инициализания">outFreq.value 		= 50;			// Выходная частота
outU4.value 		= 58;			// Напряжение точки 4
apwcntr.value		= 3;			// Количество АПВ
apwtime.value		= 1;			// Время АПВ
ignortime.value		= 0;			// Время игнорирования защиты после пуска
defencetime.value 	= 60;			// Время срабатывания защиты</Begin>
        <Step Name="Питание СУ">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################


trySet("$SAP_POWER_PCH_ENABLE", true, 3, 1000);		// Включаем разрешение работы частотника UZ1

// Регистр хранения выходной частоты
var outputFreqValue = 0;

// Цикл установки значения выходной частоты
for (var outputFreqSetupCounter = 3;  outputFreqSetupCounter != 0; outputFreqSetupCounter--) {
	if (outputFreqValue != outFreq.value) {
		setValue("$UZ1_OUTPUT_FREQ", outFreq.value);
		delay(3000, "Установка значения выходной частоты");
		outputFreqValue = getValue("$UZ1_READ_FREQ");
		delay(3000, "Проверка значения выходной частоты");
	} else {
		break;	
	}
}

// Проверка установленного значения частоты
if (outputFreqValue != outFreq.value) {
	showMessage("Не удалось установить выходную частоту");
	messageReport("Не удалось установить выходную частоту");
	valueReport("$UZ1_OUTPUT_FREQ", outputFreqValue, "Значение регистра \"Выходная частота\"");
	stepReport(false);
	abortEvaluation();
}

trySet("$UZ1_CTRL_SUPPLY", outU4.value, 3, 3000);			// Задаем напряжения точки 4
setValue("$UZ1_CTRL_DRIVE", true);							// Запуск ПЧ

// Проверка работы СУ
waitConditionMessage("KSU_WORKMODE_PED", 3, "Ожидаем включение СУ. Переключите режим управления СУ в состояние \"Отключено\"");

stepReport(true);</Step>
        <Step Name="Отключение защит">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

trySet("KSU_rrz_high_U_phase", 0, 3, 1000);
trySet("KSU_rrz_low_U_phase", 0, 3, 1000);
trySet("KSU_rrz_U_disbalance", 0, 3, 1000);
trySet("KSU_rrz_ZP", 0, 3, 1000);
trySet("KSU_rrz_ZSP", 0, 3, 1000);
trySet("KSU_rrz_I_disbalance", 0, 3, 1000);
trySet("KSU_rrz_low_resistance_insulation", 0, 3, 1000);
trySet("KSU_rrz_turbine_rotation", 0, 3, 1000);
trySet("KSU_rrz_low_P_pumpinput", 0, 3, 1000);
trySet("KSU_rrz_T_high_oil_PED", 0, 3, 1000);
trySet("KSU_rrz_low_freq", 0, 3, 1000);
trySet("KSU_rrz_high_freq", 0, 3, 1000);
trySet("KSU_rrz_wrong_phase_rotation", 0, 3, 1000);

stepReport(true);
</Step>
        <Step Name="Настройка параметров проверяемой защиты">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

trySet("KSU_rrz_delay_ZP_after_start_PED", ignortime.value, 3, 3000);	// Время игнорирования 
trySet("KSU_rrz_delay_ZP_working_PED", defencetime.value, 3, 3000);		// Время срабатывания защиты
trySet("KSU_start_APW_delay_ZP", apwtime.value, 3, 3000);				// Время АПВ (перезапуск)
trySet("KSU_setpoint_enabled_APW_ZP", apwcntr.value, 3, 3000);			// Количество АПВ
trySet("KSU_setpoint_ZP", 120, 3, 3000);								// Уставка 120, выше которой произойдет перегруз
trySet("KSU_KK_P_nominal", 85, 3, 3000);								// Коэффициент мощности 0.85

stepReport(true);</Step>
        <Step Name="Режим управлени &quot;Откл&quot;">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем допустимые значения проверяемой защиты
trySet("KSU_I_nominal", 1000, 3, 3000);		// Номинальный ток 100А

// ##########################################################################################################

// Подключаем нагрузку
setValue("$SAP_HEATER_FAN_ENABLE", true);
setValue("$SAP_HEATER_FAN1_ON", true);
setValue("$SAP_HEATER_FAN2_ON", true);

stepReport(true);





</Step>
        <Step Name="Режим управления &quot;Автоматический&quot;">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем допустимые значения проверяемой защиты
trySet("KSU_I_nominal", 1000, 3, 3000);		// Номинальный ток 100А

// ##########################################################################################################

waitConditionMessage("KSU_WORKMODE_PED", 1, "Переключите режим управления СУ в состояние \"Автоматический\"");

// Включаем защиту АПВ
trySet("KSU_rrz_ZP", 2, 3, 1000);

// Запускаем СУ
var suState = 0;

for (var cntr = 0;  cntr &lt; 3; cntr--) {
	if (suState != 1) {
		setValue("KSU_start_stop", true);
		suState = getValue("KSU_STATE_PED");
	} else {
		break;	
	}
}

if (suState != 1) {
	showMessage("Не удалось запустить СУ");
	messageReport("Не удалось запустить СУ");
	valueReport("KSU_STATE_PED", suState, "Значение регистра \"Текущее состояние работы СУ\"");
	stepReport(false);
	abortEvaluation();
}

stepReport(true);</Step>
        <Step Name="   Ожидаем срабатывание защиты">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем недопустимые значения проверяемой защиты
trySet("KSU_I_nominal", 200, 3, 3000);		// Номинальный ток 20А

// ##########################################################################################################

// ##########################################################################################################

// Ожидаем срабатывание защиты по перегрузке
var defence = waitConditionDelayMessage("KSU_STATE_PED", 0, "Ожидаем срабатывание защиты", defencetime.value * 1000);

if (defence != 1) {
	showMessage("Не сработала защита по перегрузке");
	messageReport("Не сработала защита по перегрузке");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
}

// Проверяем состояние регистра причины 
if (getValue("KSU_STOPPING_REASON") != 4) {
	showMessage("Причина последнего останова не соответствует значению ЗП");
	messageReport("Причина последнего останова не соответствует значению ЗП");
	valueReport("KSU_STOPPING_REASON", getValue("KSU_STOPPING_REASON"), "Значение регистра \"Причина последнего останова\"");
	stepReport(false);
} else {
	stepReport(true);
}

// ##########################################################################################################</Step>
        <Step Name="   Ожидаем запуск по АПВ">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем допустимые значения проверяемой защиты
trySet("KSU_I_nominal", 1000, 3, 3000);		// Номинальный ток 100А

// ##########################################################################################################

// Ожидаем автоматический запуск СУ по АПВ
var runstate = waitConditionDelayMessage("KSU_STATE_PED", 1, "Ожидаем автоматический запуск СУ по АПВ", apwtime.value * 60 * 1000);

if (runstate != 1) {
	showMessage("Не произошел запуск по АПВ");
	messageReport("Не произошел запуск по АПВ");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
} else {
	stepReport(true);
}

// ##########################################################################################################

</Step>
        <Step Name="   Ожидаем срабатывание защиты">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем недопустимые значения проверяемой защиты
trySet("KSU_I_nominal", 200, 3, 3000);		// Номинальный ток 20А

// ##########################################################################################################

// ##########################################################################################################

// Ожидаем срабатывание защиты по перегрузке
var defence = waitConditionDelayMessage("KSU_STATE_PED", 0, "Ожидаем срабатывание защиты", defencetime.value * 1000);

if (defence != 1) {
	showMessage("Не сработала защита по перегрузке");
	messageReport("Не сработала защита по перегрузке");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
}

// Проверяем состояние регистра причины 
if (getValue("KSU_STOPPING_REASON") != 4) {
	showMessage("Причина последнего останова не соответствует значению ЗП");
	messageReport("Причина последнего останова не соответствует значению ЗП");
	valueReport("KSU_STOPPING_REASON", getValue("KSU_STOPPING_REASON"), "Значение регистра \"Причина последнего останова\"");
	stepReport(false);
} else {
	stepReport(true);
}

// ##########################################################################################################</Step>
        <Step Name="   Ожидаем запуск по АПВ">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем допустимые значения проверяемой защиты
trySet("KSU_I_nominal", 1000, 3, 3000);		// Номинальный ток 100А

// ##########################################################################################################

// Ожидаем автоматический запуск СУ по АПВ
var runstate = waitConditionDelayMessage("KSU_STATE_PED", 1, "Ожидаем автоматический запуск СУ по АПВ", apwtime.value * 60 * 1000);

if (runstate != 1) {
	showMessage("Не произошел запуск по АПВ");
	messageReport("Не произошел запуск по АПВ");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
} else {
	stepReport(true);
}

// ##########################################################################################################

</Step>
        <Step Name="   Ожидаем срабатывание защиты">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем недопустимые значения проверяемой защиты
trySet("KSU_I_nominal", 200, 3, 3000);		// Номинальный ток 20А

// ##########################################################################################################

// ##########################################################################################################

// Ожидаем срабатывание защиты по перегрузке
var defence = waitConditionDelayMessage("KSU_STATE_PED", 0, "Ожидаем срабатывание защиты", defencetime.value * 1000);

if (defence != 1) {
	showMessage("Не сработала защита по перегрузке");
	messageReport("Не сработала защита по перегрузке");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
}

// Проверяем состояние регистра причины 
if (getValue("KSU_STOPPING_REASON") != 4) {
	showMessage("Причина последнего останова не соответствует значению ЗП");
	messageReport("Причина последнего останова не соответствует значению ЗП");
	valueReport("KSU_STOPPING_REASON", getValue("KSU_STOPPING_REASON"), "Значение регистра \"Причина последнего останова\"");
	stepReport(false);
} else {
	stepReport(true);
}

// ##########################################################################################################</Step>
        <Step Name="   Ожидаем запуск по АПВ">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем допустимые значения проверяемой защиты
trySet("KSU_I_nominal", 1000, 3, 3000);		// Номинальный ток 100А

// ##########################################################################################################

// Ожидаем автоматический запуск СУ по АПВ
var runstate = waitConditionDelayMessage("KSU_STATE_PED", 1, "Ожидаем автоматический запуск СУ по АПВ", apwtime.value * 60 * 1000);

if (runstate != 1) {
	showMessage("Не произошел запуск по АПВ");
	messageReport("Не произошел запуск по АПВ");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
} else {
	stepReport(true);
}

// ##########################################################################################################

</Step>
        <Step Name="   Ожидаем срабатывание защиты (БЛОК)">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем недопустимые значения проверяемой защиты
trySet("KSU_I_nominal", 200, 3, 3000);		// Номинальный ток 20А

// ##########################################################################################################

// ##########################################################################################################

// Ожидаем срабатывание защиты по перегрузке
var defence = waitConditionDelayMessage("KSU_STATE_PED", 6, "Ожидаем срабатывание защиты", defencetime.value * 1000);

if (defence != 1) {
	showMessage("Не сработала защита по перегрузке");
	messageReport("Не сработала защита по перегрузке");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
}

// Проверяем состояние регистра причины 
if (getValue("KSU_STOPPING_REASON") != 4) {
	showMessage("Причина последнего останова не соответствует значению ЗП");
	messageReport("Причина последнего останова не соответствует значению ЗП");
	valueReport("KSU_STOPPING_REASON", getValue("KSU_STOPPING_REASON"), "Значение регистра \"Причина последнего останова\"");
	stepReport(false);
} else {
	stepReport(true);
}

// ##########################################################################################################</Step>
        <Step Name="Режим упраления &quot;Ручной&quot;">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем допустимые значения проверяемой защиты
trySet("KSU_I_nominal", 1000, 3, 3000);		// Номинальный ток 100А

// ##########################################################################################################

waitConditionMessage("KSU_WORKMODE_PED", 2, "Переключите режим управления СУ в состояние \"Ручной\" и запустите СУ");
waitConditionMessage("KSU_STATE_PED", 1, "Переключите режим управления СУ в состояние \"Ручной\" и запустите СУ");

// ##########################################################################################################

// Включаем защиту БЛОК
trySet("KSU_rrz_ZP", 2, 3, 1000);

stepReport(true);</Step>
        <Step Name="   Ожидаем срабатывание защиты">// ##########################################################################################################

/*
	-------------------------------------------------
 	Функция записи параметра с проверкой после записи:
	-------------------------------------------------
	alias 	- псевдоним параметра
	value 	- записываемое значение
	counter - количество попыток записать параметр
	sleep 	- задержка между повторными записями
*/

function trySet(alias, value, counter, sleep) {
	var aliasValue = getValue(alias);
	for (var cntr = 0; cntr &lt; counter; cntr++) {
		if (aliasValue != value) {
			setValue(alias, value);
			delay(sleep, "Запись значения параметра " + alias);
			aliasValue = getValue(alias);
		}
	}
	if (aliasValue != value) {
		showMessage("Не удалось изменить значение параметра " + alias);
		messageReport("Не удалось изменить значение параметра " + alias);
		valueReport(alias, aliasValue, "Значение регистра " + alias);
		stepReport(false);
		abortEvaluation();
	}
}

// ##########################################################################################################

// ##########################################################################################################

// Устанавливаем недопустимые значения проверяемой защиты
trySet("KSU_I_nominal", 200, 3, 3000);		// Номинальный ток 20А

// ##########################################################################################################

// ##########################################################################################################

// Ожидаем срабатывание защиты по перегрузке
var defence = waitConditionDelayMessage("KSU_STATE_PED", 0, "Ожидаем срабатывание защиты", defencetime.value * 1000);

if (defence != 1) {
	showMessage("Не сработала защита по перегрузке");
	messageReport("Не сработала защита по перегрузке");
	valueReport("KSU_STATE_PED", getValue("KSU_STATE_PED"), "Значение регистра \"Состояние СУ\"");
	stepReport(false);
	abortEvaluation();
}

// Проверяем состояние регистра причины 
if (getValue("KSU_STOPPING_REASON") != 4) {
	showMessage("Причина последнего останова не соответствует значению ЗП");
	messageReport("Причина последнего останова не соответствует значению ЗП");
	valueReport("KSU_STOPPING_REASON", getValue("KSU_STOPPING_REASON"), "Значение регистра \"Причина последнего останова\"");
	stepReport(false);
} else {
	stepReport(true);
}

// ##########################################################################################################</Step>
        <End Name="Деинициализация">setValue("$SAP_HEATER_FAN_ENABLE", false);
setValue("$SAP_HEATER_FAN1_ON", false);
setValue("$SAP_HEATER_FAN2_ON", false);</End>
    </Steps>
</Test>
