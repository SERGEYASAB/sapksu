#include "ErrorClassifier.h"

ErrorClassifier::ErrorClassifier(QWidget *parent) : QMessageBox(parent)
{
    //Default
    errors.insert(0, {Error::Unknown, tr("Неизвестная ошибка"), tr("Обратитесь к разработчикам.")});

    //Warnings
    errors.insert(1, {Error::Warning, tr("Ошибка выбора пользователя"), tr("Необходимо выбрать пользователя из предоставленного списка.")});
    errors.insert(2, {Error::Warning, tr("Ошибка авторизации"), tr("Введенный пароль недействителен для текущего пользователя. \n "
                      "Убедитесь в правильном выборе пользователя, раскладки клавиатуры и состояния клавиши \"Caps Lock\", после чего повторите попытку.")});
    errors.insert(3, {Error::Warning, tr("Ошибка изменения пароля"), tr("Введенные пароли не совпадают. \n "
                      "Необходимо ввести одинаковые пароли в поля \"Новый пароль\" и \"Повторить пароль\".")});
    errors.insert(4, {Error::Warning, tr("Ошибка выбора элемента"), tr("Необходимо выбрать элемент, над которым производится действие.")});
    errors.insert(5, {Error::Warning, tr("Ошибка удаления протокола обмена"), tr("Протокол обмена не может быть удален так как связан с версией ПО КСУ. "
                      "Для возможности удаления данного протокола обмена удалите все связанные с ним версии ПО КСУ.")});
    errors.insert(6, {Error::Warning, tr("Ошибка создания протокола обмена"), tr("Поле <Код> должно быть уникальным.\r\n"
                      "Поле <Название> должно быть не пустым и уникальным.")});
    errors.insert(7, {Error::Warning, tr("Ошибка создания переменной протокола обмена"), tr("Маска флага должна быть целым неотрицательным значением.")}); //Modbus
    errors.insert(8, {Error::Warning, tr("Ошибка создания переменной протокола обмена"), tr("Выбранный код уже используется. Выберите другое значение.")}); //Modbus
    errors.insert(9, {Error::Warning, tr("Ошибка создания переменной протокола обмена"), tr("Значение флага не должно быть пустым.")}); //Modbus
    errors.insert(10, {Error::Warning, tr("Ошибка создания кода ошибки в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")});
    errors.insert(11, {Error::Warning, tr("Ошибка создания вида запуска в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")});
    errors.insert(12, {Error::Warning, tr("Ошибка создания класса события журнала КСУ в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")}); //Modbus
    errors.insert(13, {Error::Warning, tr("Ошибка создания кода события журнала КСУ в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")}); //Modbus
    errors.insert(14, {Error::Warning, tr("Ошибка создания флага возвращаемых параметров функции 0х10 в протоколе обмена"), tr("Поле \"Псевдоним\" должно быть не пустым и уникальным.")});
    errors.insert(15, {Error::Warning, tr("Ошибка создания расшифровки слова состояния в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")});
    errors.insert(16, {Error::Warning, tr("Ошибка создания кода причины останова в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")});
    errors.insert(17, {Error::Warning, tr("Ошибка создания режима работы в протоколе обмена"), tr("Поле \"Имя\" должно быть не пустым. Поле \"Код\" должно быть не пустым и уникальным.")});
    errors.insert(18, {Error::Warning, tr("Ошибка создания версии ПО КСУ"), tr("Необходимо выбрать тип КСУ.")});
    errors.insert(19, {Error::Warning, tr("Ошибка создания версии ПО КСУ"), tr("Необходимо заполнить поле \"Версия ПО КСУ\".")});
    errors.insert(20, {Error::Warning, tr("Ошибка создания версии ПО КСУ"), tr("Необходимо выбрать протокол обмена.")});
    errors.insert(21, {Error::Warning, tr("Ошибка создания версии ПО КСУ"), tr("Необходимо выбрать классификатор параметров.")});
    errors.insert(22, {Error::Warning, tr("Ошибка удаления типа КСУ"), tr("Невозможно удалить тип КСУ, т.к. к нему привязана одна из версий ПО КСУ.")});
    errors.insert(23, {Error::Warning, tr("Ошибка создания типа КСУ"), tr("Необходимо заполнить поле \"Тип КСУ\".")});
    errors.insert(24, {Error::Warning, tr("Ошибка создания типа КСУ"), tr("Необходимо выбрать параметры САП.")});
    errors.insert(25, {Error::Warning, tr("Ошибка создания псевдонима параметра"), tr("Необходимо задать псевдоним параметра.")});
    errors.insert(26, {Error::Warning, tr("Ошибка создания шаблона параметров"), tr("Поле <Код> должно быть уникальным.\r\n"
                       "Поле <Название> должно быть уникальным.\r\n"
                       "Все поля должны быть заполнены.")});
    errors.insert(27, {Error::Warning, tr("Ошибка удаления параметров САП"), tr("Удаление шаблона параметров САП невозможно, т.к. к нему привязан один из типов КСУ.")});
    errors.insert(28, {Error::Warning, tr("Ошибка создания параметров САП"), tr("Поле <Код> должно быть уникальным.\r\n"
                       "Поле <Название> должно быть уникальным.\r\n"
                       "Все поля должны быть заполнены.")});
    errors.insert(29, {Error::Warning, tr("Ошибка создания типа СУ"), tr("Необходимо заполнить поле \"Название СУ\".")});
    errors.insert(30, {Error::Warning, tr("Ошибка создания пользователя"), tr("Необходимо заполнить поле \"Имя пользователя\".")});
    errors.insert(31, {Error::Warning, tr("Ошибка создания пользователя"), tr("Необходимо задать параметр \"Уровень доступа\".")});
    errors.insert(32, {Error::Warning, tr("Ошибка создания пользователя"), tr("Введенные пароли не совпадают. \n "
                       "Необходимо ввести одинаковые пароли в поля \"Задайте пароль\" и \"Подтвердите пароль\".")});
    errors.insert(33, {Error::Warning, tr("Ошибка построения отчета"), tr("Необходимо выбрать отчет из списка, либо временной интервал для формирования отчета.")});
    errors.insert(34, {Error::Warning, tr("Ошибка сохранения файла представления"), tr("Убедитесь в наличии соответствующих прав доступа к выбранной директории и повторите попытку.")});
    errors.insert(35, {Error::Warning, tr("Ошибка сохранения файла представления"), tr("Необходимо заполнить имя файла.")});
    errors.insert(36, {Error::Warning, tr("Ошибка сохранения файла представления"), tr("Файл представления с заданным именем уже существует. Введите другое имя.")});
    errors.insert(37, {Error::Warning, tr("Ошибка удаления файла представления"), tr("Убедитесь в наличии соответствующих прав доступа к выбранной директории и повторите попытку.")});
    errors.insert(38, {Error::Warning, tr("Ошибка удаления файла теста"), tr("Убедитесь в наличии соответствующих прав доступа к директории хранения файлов теста и повторите попытку.")});
    errors.insert(39, {Error::Warning, tr("Ошибка создания локальной переменной теста"), tr("Необходимо задать имя переменной.")});
    errors.insert(40, {Error::Warning, tr("Ошибка создания локальной переменной теста"), tr("Переменная с таким именем уже существует в тесте. Необходимо задать другое имя переменной.")});
    errors.insert(41, {Error::Warning, tr("Ошибка изменения локальной переменной теста"), tr("Необходимо задать имя переменной.")});
    errors.insert(42, {Error::Warning, tr("Ошибка задания точки останова выполнения теста"), tr("Номер шага задан некорректно. Убедитесь в корректности введенного шага и повторите попытку.")});
    errors.insert(43, {Error::Warning, tr("Ошибка создания набора тестов"), tr("Поле \"Название набора\" должно быть уникальным.")});
    errors.insert(44, {Error::Warning, tr("Ошибка создания теста"), tr("Поле \"Название\" должно быть уникальным.")});
    errors.insert(45, {Error::Warning, tr("Ошибка сохранения файла конфигурации ручного тестирования"), tr("Убедитесь в наличии соответствующих прав доступа к выбранной директории и повторите попытку.")});
    errors.insert(46, {Error::Warning, tr("Ошибка открытия файла конфигурации ручного тестирования"), tr("Убедитесь в наличии соответствующих прав доступа к выбранной директории и повторите попытку.")});
    errors.insert(47, {Error::Warning, tr("Ошибка открытия файла конфигурации ручного тестирования"), tr("Файл конфигурации поврежден. Это также может быть обусловлено отсутствием необходимых прав доступа к целевой директории. Обратитесь к системному администратору.")});
    errors.insert(48, {Error::Warning, tr("Ошибка чтения (записи) пароля"), tr("Запрос не выполнен. Подробности смотрите в логе обмена данными с КСУ.")});
    errors.insert(49, {Error::Warning, tr("Ошибка подачи сигнала ТБ"), tr("Запрещено включать сигнал турбинного вращения, при подключенных фазах питания!")});
    errors.insert(50, {Error::Warning, tr("Ошибка ввода данных по КСУ"), tr("Необходимо заполнить поля \"Название КСУ\" и \"Версия ПО КСУ\".")});


    //Criticals
    errors.insert(500, {Error::Critical, tr("Отсутствуют необходимые данные в БД"), tr("Обратитесь к систему администратору.")});
    errors.insert(501, {Error::Critical, tr("Ошибка связи с базой данных"), tr("Обратитесь к систему администратору.")});
    errors.insert(502, {Error::Critical, tr("Ошибка записи параметра"), tr("Не удалось записать один или несколько выбранных параметров. Подробные сведения смотрите в логе обмена данными с КСУ.")});
    errors.insert(503, {Error::Critical, tr("Ошибка выполнения скрипта"), tr("Обнаружено необработанное исключение в скрипте. Обратитесь к разработчикам.")});
    errors.insert(504, {Error::Critical, tr("Ошибка вызова функции скрипта"), tr("Данная функция не предназначена для протокола 7.35b. Используйте другие функции для выполнения необходимых действий.")});

    setMinimumWidth(400);
}

ErrorClassifier *ErrorClassifier::instance()
{
    static ErrorClassifier singletone;
    return &singletone;
}

int ErrorClassifier::showError(quint16 code)
{
    Error error = errors.contains(code) ? errors.value(code) : errors.value(0);

    switch (error.type) {
        case Error::Info: {
            setIcon(QMessageBox::Information);
            setWindowTitle(tr("Информация"));
            break;
        }

        case Error::Question: {
            setIcon(QMessageBox::Question);
            setWindowTitle(tr("Подтверждение действия"));
            break;
        }

        case Error::Warning: {
            setIcon(QMessageBox::Warning);
            setWindowTitle(tr("Ошибка ") + QString::number(code));
            break;
        }

        default:
        case Error::Critical: {
            setIcon(QMessageBox::Critical);
            setWindowTitle(tr("Ошибка ") + QString::number(code));
            break;
        }
    }

    setText(error.message);
    setInformativeText(error.resolveMethod);
    return exec();
    //Если делать инфо и вопрос - предусмотреть кнопки здесь
    //setStandardButtons(QMessageBox::Ok);
}

QString ErrorClassifier::errorName(quint16 code)
{
    return errors.contains(code) ? errors.value(code).message : errors.value(0).message;
}

QString ErrorClassifier::errorDescription(quint16 code)
{
    return errors.contains(code) ? errors.value(code).resolveMethod : errors.value(0).resolveMethod;
}

QString ErrorClassifier::errorFullText(quint16 code)
{
    return errors.contains(code) ? errors.value(code).message + " " + errors.value(code).resolveMethod
                                 : errors.value(0).message + " " + errors.value(0).resolveMethod;
}

void ErrorClassifier::setErrorDescription(quint16 code, const QString &text)
{
    if (!errors.contains(code))
        return;

    errors[code].message = text;
}

ErrorClassifier::~ErrorClassifier()
{
}
